// SPDX-FileCopyrightText: 1995-2025 Magic Lane Intellectual Property B.V. <info@magiclane.com>
// SPDX-License-Identifier: LicenseRef-MagicLane-Proprietary
//
// Magic Lane Intellectual Property B.V, its affiliates and licensors retain all
// intellectual property and proprietary rights in and to this material, related
// documentation and any modifications thereto. Any use, reproduction,
// disclosure or distribution of this material and related documentation
// without an express license agreement from Magic Lane Intellectual Property B.V.
// or its affiliates is strictly prohibited.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names

/// @nodoc
library;

import 'dart:ffi' as ffi;

class GEMKitFFigen {
  /// The symbols are looked up in [dynamicLibrary].
  GEMKitFFigen(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GEMKitFFigen.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  ffi.Pointer<ffi.Char> native_call(ffi.Pointer<ffi.Char> json, int jsonSize) {
    return _native_call(json, jsonSize);
  }

  late final ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Char> p1, ffi.Long p2)>> _native_callPtr =
      _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Char>, ffi.Long)>>('native_call');
  late final ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> p1, int p2)
      _native_call = _native_callPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> native_call_createObject(
    ffi.Pointer<ffi.Char> json,
    int jsonSize,
  ) {
    return _native_call_createObject(json, jsonSize);
  }

  late final ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> p1,
              ffi.Long p2)>> _native_call_createObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Long)>>('native_call_createObject');
  late final ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> p1, int p2)
      _native_call_createObject = _native_call_createObjectPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  void native_register_callback(Dart_onNotifyEvent pFunc) {
    return _native_register_callback(pFunc);
  }

  late final ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(Dart_onNotifyEvent p1)>>
      _native_register_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_onNotifyEvent)>>(
    'native_register_callback',
  );
  late final void Function(Dart_onNotifyEvent p1) _native_register_callback =
      _native_register_callbackPtr
          .asFunction<void Function(Dart_onNotifyEvent)>();

  void native_deleteObject(ffi.Pointer<ffi.Char> json, int theSize) {
    return _native_deleteObject(json, theSize);
  }

  late final ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Char> p1, ffi.Long p2)>>
      _native_deleteObjectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Char>, ffi.Long)>>('native_deleteObject');
  late final void Function(ffi.Pointer<ffi.Char> p1, int p2)
      _native_deleteObject = _native_deleteObjectPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  int Dart_InitializeApiDLFunc(ffi.Pointer<ffi.Void> data) {
    return _Dart_InitializeApiDLFunc(data);
  }

  late final ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> p1)>>
      _Dart_InitializeApiDLFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
    'Dart_InitializeApiDLFunc',
  );
  late final int Function(ffi.Pointer<ffi.Void> p1) _Dart_InitializeApiDLFunc =
      _Dart_InitializeApiDLFuncPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  void set_dart_port(int port) {
    return _set_dart_port(port);
  }

  late final ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.LongLong p1)>>
      _set_dart_portPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.LongLong)>>(
    'set_dart_port',
  );
  late final void Function(int p1) _set_dart_port =
      _set_dart_portPtr.asFunction<void Function(int)>();
}

// ignore: camel_case_types
typedef Dart_onNotifyEvent
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>;
